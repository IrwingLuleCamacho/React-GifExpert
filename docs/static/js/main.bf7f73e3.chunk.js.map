{"version":3,"sources":["components/CategoryAdd.jsx","helpers/gif.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["CategoryAdd","props","setCategories","useState","category","setCategory","onSubmit","event","preventDefault","trim","length","categories","className","type","value","onChange","target","placeholder","getGifs","limit","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAACC,GAExB,IAAQC,EAAkBD,EAAlBC,cAER,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OACI,sBAAMC,SATS,SAACC,GAChBA,EAAMC,iBACFJ,EAASK,OAAOC,OAAS,IACzBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAkBO,OAC1CN,EAAY,MAKYO,UAAU,aAAtC,SACI,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,MAAOV,EAAUW,SAdzC,SAACR,GACzBF,EAAYE,EAAMS,OAAOF,QAauEG,YAAY,wC,uBCtBvGC,EAAO,uCAAG,WAAOd,EAAUe,GAAjB,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUlB,GAD7C,kBACgEe,EADhE,uDAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAWZM,GAXY,4CAAH,wDCEPO,EAAc,SAACjC,GAExB,IAAQ4B,EAAQ5B,EAAR4B,IAER,OACI,qBAAKjB,UAAU,qBAAf,SACI,qBAAkBuB,IAAKN,EAAIR,IAAKT,UAAU,wCAAwCwB,IAAKP,EAAIE,OAAjFF,EAAIC,OCLbO,EAAU,SAACpC,GAEpB,IAAQG,EAAaH,EAAbG,SAER,ECJwB,SAACA,EAAUe,GACnC,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAJAC,qBAAU,WACNvB,EAAQd,EAAUe,GAAOuB,MAAK,SAAAf,GAAI,OAAIa,EAAS,CAAEd,KAAMC,EAAMW,SAAS,SACvE,CAAClC,EAAUe,IAEPoB,EDNyBI,CAAavC,EAD/B,GACAuB,EAAd,EAAQD,KAAYY,EAApB,EAAoBA,QAEpB,OACI,qBAAK1B,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,6BAAKR,IACJkC,GAAW,2CACZ,qBAAK1B,UAAU,6CAAf,SAEQe,EAAKC,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIC,eEdrCc,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,iBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,sBAAKU,UAAU,iBAAf,UACI,8CACA,cAAC,EAAD,CAAaV,cAAeA,IAC5B,uBAEIS,EAAWiB,KAAI,SAAAxB,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,UCF1CyC,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.bf7f73e3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = (props) => {\r\n\r\n    const { setCategories } = props;\r\n\r\n    const [category, setCategory] = useState('');\r\n\r\n    const changeInputCategory = (event) => {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    const submitForm = (event) => {\r\n        event.preventDefault();\r\n        if (category.trim().length > 2) {\r\n            setCategories(categories => [category, ...categories]);\r\n            setCategory('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitForm} className=\"form-group\">\r\n            <input type=\"text\" className=\"form-control\" value={category} onChange={changeInputCategory} placeholder=\"Ingrese la categorÃ­a a buscar\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category, limit) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&&api_key=4JZwqp4PPkhuBhYO5ivz61jxNukAaPpw`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n    const gifs = data.map(gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGridItem = (props) => {\r\n\r\n    const { gif } = props;\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <img key={gif.id} src={gif.url} className=\"img-fluid shadow-1-strong rounded m-1\" alt={gif.title} />\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    gif: PropTypes.object.isRequired\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = (props) => {\r\n\r\n    const { category } = props;\r\n    const limit = 8;\r\n    const { data: gifs, loading } = useFetchGifs(category, limit);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <h4>{category}</h4>\r\n                {loading && <p>Loading...</p>}\r\n                <div className=\"d-md-flex flex-md-row align-items-end mb-3\">\r\n                    {\r\n                        gifs.map(gif =>\r\n                            <GifGridItem key={gif.id} gif={gif} />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/gif'\r\n\r\n\r\nexport const useFetchGifs = (category, limit) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category, limit).then(gifs => setState({ data: gifs, loading: false }));\r\n    }, [category, limit]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { CategoryAdd } from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Programacion']);\r\n\r\n    return (\r\n        <div className='container mt-4'>\r\n            <h2>GifExpertApp</h2>\r\n            <CategoryAdd setCategories={setCategories} />\r\n            <hr />\r\n            {\r\n                categories.map(category => <GifGrid key={category} category={category} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}